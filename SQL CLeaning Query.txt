--Using SQL to Clean Data

SELECT *
FROM NashvilleHousing

-- Standardize Date Format

SELECT SaleDate, CONVERT(Date,SaleDate)
FROM NashvilleHousing

ALTER TABLE NashvilleHousing
ADD SaleDateConverted Date;

UPDATE NashvilleHousing
SET SaleDateConverted=CONVERT(Date,SaleDate)

SELECT SaleDateConverted
FROM NashvilleHousing

-- Populate Property Address Data
SELECT PropertyAddress
FROM NashvilleHousing

SELECT PropertyAddress
FROM NashvilleHousing
WHERE PropertyAddress is NULL

SELECT *
FROM NashvilleHousing
WHERE PropertyAddress is NULL

SELECT *
FROM NashvilleHousing
--WHERE PropertyAddress is NULL
ORDER BY ParcelID

-- Create Self-join
SELECT Orig.ParcelID, Orig.PropertyAddress, New.ParcelID, New.PropertyAddress,
	ISNULL(Orig.PropertyAddress, New.PropertyAddress)
FROM NashvilleHousing AS Orig
JOIN NashvilleHousing AS New 
	ON Orig.ParcelID=New.ParcelID
	AND Orig.[UniqueID ]<>New.[UniqueID ]
WHERE Orig.PropertyAddress is NULL

UPDATE Orig
SET PropertyAddress=ISNULL(Orig.PropertyAddress, New.PropertyAddress)
FROM NashvilleHousing AS Orig
JOIN NashvilleHousing AS New 
	ON Orig.ParcelID=New.ParcelID
	AND Orig.[UniqueID ]<>New.[UniqueID ]
WHERE Orig.PropertyAddress is NULL

-- Breaking Out Address Into Individual Columns (Address, City, State)
SELECT PropertyAddress
FROM NashvilleHousing

SELECT 
	SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1) AS Address,
	SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress)) AS Address
FROM NashvilleHousing

ALTER TABLE NashvilleHousing
ADD PropertySplitAddress varchar(255);

UPDATE NashvilleHousing
SET PropertySplitAddress=SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

ALTER TABLE NashvilleHousing
ADD PropertySplitCity varchar(255);

UPDATE NashvilleHousing
SET PropertySplitCity=SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress))

SELECT *
FROM NashvilleHousing

SELECT OwnerAddress
FROM NashvilleHousing

SELECT PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
	PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
	PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)
FROM NashvilleHousing

ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress varchar(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress=PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3)

ALTER TABLE NashvilleHousing
ADD OwnerSplitCity varchar(255);

UPDATE NashvilleHousing
SET OwnerSplitCity=PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2)

ALTER TABLE NashvilleHousing
ADD OwnerSplitState varchar(255);

UPDATE NashvilleHousing
SET OwnerSplitState=PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)

SELECT *
FROM NashvilleHousing

-- Change Y and N to Yes and No in SoldAsVacant Field

SELECT Distinct(SoldAsVacant), Count(SoldAsVacant)
FROM NashvilleHousing
GROUP BY SoldAsVacant
ORDER BY 2


Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From NashvilleHousing

UPDATE NashvilleHousing
	SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

SELECT Distinct(SoldAsVacant), Count(SoldAsVacant)
FROM NashvilleHousing
GROUP BY SoldAsVacant
ORDER BY 2

-- Remove Duplicates

SELECT *
FROM NashvilleHousing

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) AS row_num
From NashvilleHousing
)
Select *
From RowNumCTE
Where row_num > 1
Order by PropertyAddress
